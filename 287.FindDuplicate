287. Find the Duplicate Number
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Example 1:
Input: [1,3,4,2,2]
Output: 2
Example 2:

Input: [3,1,3,4,2]
Output: 3

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.

要求：
找出数组nums中重复的值

条件：
1. 数组nums中的值范围[1, n], nums的长度为n+1
2. nums为只读数组, 不能修改
3. 空间复杂度为O(1), 不能开辟新的数组
4. 时间复杂度小于O(n2), 不能暴力
5. nums中有且只有1个重复值, 但可以重复多次

解法1：
二分查找（根据定义二分查找适用于顺序序列）
因为要查找的数值范围是[1, n], 是顺序序列, 所以可以使用二分查找
样例：[1,3,4,2,2]
假设我们要查找的数为x，那么数组中小于等于x的值的个数必然大于x。
当x为1是，样例中小于等于1的值的个数为1
当x为2是，样例中小于等于1的值的个数为3
当x为3是，样例中小于等于1的值的个数为3
当x为4是，样例中小于等于1的值的个数为3
所以重复的数值就为2。
int FindDuplicate(std::vector<int>& nums)
{
    int left = 1;
    int right = nums.size() - 1;
    int middle = 0;
    int cnt = 0;

    while (left < right)
    {
        cnt = 0;
        middle = left + (right - left) / 2;

        for (auto begin = nums.begin(); begin < nums.end(); ++begin)
        {
            if (*begin <= middle)
            {
                cnt++;
            }
        }

        if (cnt > middle)
        {
            right = middle;
        }
        else
        {
            left = middle + 1;
        }
    }

    return left;
}
